name: Release
on:
  pull_request_target:
    branches: [ main ]
    types: [ opened, synchronize, reopened, labeled, unlabeled ]

jobs:
  check_labels:
    runs-on: ubuntu-latest
    outputs:
      release: ${{ steps.label_check.outputs.release }}
    steps:
      - name: Check if labeled non-release
        id: label_check
        run: |
          release=${{ ! contains(github.event.pull_request.labels.*.name, 'non-release') }}
          echo "::set-output name=release::$release"

      - name: Check if a comment has already been left
        id: comment_check
        if: steps.label_check.outputs.release == 'false'
        uses: actions/github-script@v3
        with:
          script: |
            const result = await github.issues.listComments({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo
            })
            var needsComment = true
            if (result && result.data) {
              const comments = result.data.reverse()
              const lastBotComment = comments.find(function(comment) {
                return comment.user.type == "Bot"
              })
              if (lastBotComment) {
                const text = lastBotComment.body.replace(/(<([^>]+)>)/ig,"")
                needsComment = !text.includes("PR tagged non-release")
              }
            }
            console.log(`::set-output name=needs_comment::${needsComment}`)

      - name: Leave warning comment if labeled non-release
        if: steps.label_check.outputs.release == 'false' && steps.comment_check.outputs.needs_comment == 'true'
        uses: actions/github-script@v3
        with:
          script: |
            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '‚ö†Ô∏è <b>PR tagged <i>non-release</i></b> ‚ö†Ô∏è<br><br>This PR is tagged <b>non-release</b> which means that a new release on GitHub Packages will NOT be made.'
            })


  check_version:
    runs-on: ubuntu-latest
    needs: check_labels
    if: needs.check_labels.outputs.release == 'true'
    env:
      check_version_cmd: mvn help:evaluate -Dexpression=project.version -q -DforceStdout
    steps:
      - name: Checkout branch
        uses: actions/checkout@v2
        with:
          ref: ${{ github.head_ref }}

      - name: Setup JDK and Maven
        uses: actions/setup-java@v2
        with:
          java-version: '>=11.0.0'
          distribution: 'adopt'

      - name: Get current POM version
        id: get_current_version
        run: |
          version=$(${{ env.check_version_cmd }})
          echo "::set-output name=version::$version"

      - name: Checkout target branch
        uses: actions/checkout@v2
        with:
          ref: ${{ github.base_ref }}

      - name: Get last POM version
        id: get_last_version
        run: |
          version=$(${{ env.check_version_cmd }})
          echo "::set-output name=version::$version"

      - name: Check for version bump
        id: check_version_bump
        env:
          curr_version: ${{ steps.get_current_version.outputs.version }}
          last_version: ${{ steps.get_last_version.outputs.version }}
        run: |
          if ! dpkg --compare-versions $curr_version "gt" $last_version; then
            echo "::set-output name=bumped::false"
          fi

      - name: Check if a comment has already been left
        id: comment_check
        uses: actions/github-script@v3
        with:
          script: |
            const result = await github.issues.listComments({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo
            })
            var needsComment = true
            if (result && result.data) {
              const comments = result.data.reverse()
              const lastBotComment = comments.find(function(comment) {
                return comment.user.type == "Bot"
              })
              if (lastBotComment) {
                const text = lastBotComment.body.replace(/(<([^>]+)>)/ig,"")
                needsComment = !text.includes("Version number not bumped")
              }
            }
            console.log(`::set-output name=needs_comment::${needsComment}`)

      - name: Leave error comment if version not bumped
        if: steps.check_version_bump.outputs.bumped == 'false' && steps.comment_check.outputs.needs_comment == 'true'
        uses: actions/github-script@v3
        env:
          last_version: ${{ steps.get_last_version.outputs.version }}
        with:
          script: |
            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'üõë <b>Version number not bumped</b> üõë<br><br>The version number in the POM was not bumped since last release. Please update the version to >${{ env.last_version }} in order to release. If these changes are not for release (e.g., updating Javadocs, workflows, etc.), then label the PR with <b>non-release</b>.'
            })

      - name: Fail workflow if version not bumped
        if: steps.check_version_bump.outputs.bumped == 'false'
        run: exit 1
